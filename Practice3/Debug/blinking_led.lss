
blinking_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000010de  00001172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00001172  2**0
                  ALLOC
  3 .stab         00001d64  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d8e  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003c66  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c78  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      34:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_13>
      38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      40:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_16>
      44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a4 30       	cpi	r26, 0x04	; 4
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	0e 94 02 06 	call	0xc04	; 0xc04 <main>
      88:	0c 94 6d 08 	jmp	0x10da	; 0x10da <_exit>

0000008c <__bad_interrupt>:
      8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <blinking_led>:
 */

#include<avr/io.h>
#include<util/delay.h>

int blinking_led(void) {
      90:	cf 93       	push	r28
      92:	df 93       	push	r29
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
      98:	6c 97       	sbiw	r28, 0x1c	; 28
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	0f be       	out	0x3f, r0	; 63
      a2:	cd bf       	out	0x3d, r28	; 61

	DDRB = 0b00100000;
      a4:	84 e2       	ldi	r24, 0x24	; 36
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	20 e2       	ldi	r18, 0x20	; 32
      aa:	fc 01       	movw	r30, r24
      ac:	20 83       	st	Z, r18

	// forever loop
	while(1) {
		PORTB |= 0x20; 		// PB5 = 1 -> LED ON
      ae:	85 e2       	ldi	r24, 0x25	; 37
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	25 e2       	ldi	r18, 0x25	; 37
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	20 62       	ori	r18, 0x20	; 32
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	aa e7       	ldi	r26, 0x7A	; 122
      c6:	b4 e4       	ldi	r27, 0x44	; 68
      c8:	89 83       	std	Y+1, r24	; 0x01
      ca:	9a 83       	std	Y+2, r25	; 0x02
      cc:	ab 83       	std	Y+3, r26	; 0x03
      ce:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	4a e7       	ldi	r20, 0x7A	; 122
      d6:	55 e4       	ldi	r21, 0x45	; 69
      d8:	69 81       	ldd	r22, Y+1	; 0x01
      da:	7a 81       	ldd	r23, Y+2	; 0x02
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	9c 81       	ldd	r25, Y+4	; 0x04
      e0:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
      e4:	dc 01       	movw	r26, r24
      e6:	cb 01       	movw	r24, r22
      e8:	8d 83       	std	Y+5, r24	; 0x05
      ea:	9e 83       	std	Y+6, r25	; 0x06
      ec:	af 83       	std	Y+7, r26	; 0x07
      ee:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	40 e8       	ldi	r20, 0x80	; 128
      f6:	5f e3       	ldi	r21, 0x3F	; 63
      f8:	6d 81       	ldd	r22, Y+5	; 0x05
      fa:	7e 81       	ldd	r23, Y+6	; 0x06
      fc:	8f 81       	ldd	r24, Y+7	; 0x07
      fe:	98 85       	ldd	r25, Y+8	; 0x08
     100:	0e 94 9c 06 	call	0xd38	; 0xd38 <__cmpsf2>
     104:	88 23       	and	r24, r24
     106:	2c f4       	brge	.+10     	; 0x112 <blinking_led+0x82>
		__ticks = 1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	9a 87       	std	Y+10, r25	; 0x0a
     10e:	89 87       	std	Y+9, r24	; 0x09
     110:	3f c0       	rjmp	.+126    	; 0x190 <blinking_led+0x100>
	else if (__tmp > 65535)
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	3f ef       	ldi	r19, 0xFF	; 255
     116:	4f e7       	ldi	r20, 0x7F	; 127
     118:	57 e4       	ldi	r21, 0x47	; 71
     11a:	6d 81       	ldd	r22, Y+5	; 0x05
     11c:	7e 81       	ldd	r23, Y+6	; 0x06
     11e:	8f 81       	ldd	r24, Y+7	; 0x07
     120:	98 85       	ldd	r25, Y+8	; 0x08
     122:	0e 94 fb 07 	call	0xff6	; 0xff6 <__gesf2>
     126:	18 16       	cp	r1, r24
     128:	4c f5       	brge	.+82     	; 0x17c <blinking_led+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	40 e2       	ldi	r20, 0x20	; 32
     130:	51 e4       	ldi	r21, 0x41	; 65
     132:	69 81       	ldd	r22, Y+1	; 0x01
     134:	7a 81       	ldd	r23, Y+2	; 0x02
     136:	8b 81       	ldd	r24, Y+3	; 0x03
     138:	9c 81       	ldd	r25, Y+4	; 0x04
     13a:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     13e:	dc 01       	movw	r26, r24
     140:	cb 01       	movw	r24, r22
     142:	bc 01       	movw	r22, r24
     144:	cd 01       	movw	r24, r26
     146:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     14a:	dc 01       	movw	r26, r24
     14c:	cb 01       	movw	r24, r22
     14e:	9a 87       	std	Y+10, r25	; 0x0a
     150:	89 87       	std	Y+9, r24	; 0x09
     152:	0f c0       	rjmp	.+30     	; 0x172 <blinking_led+0xe2>
     154:	80 e9       	ldi	r24, 0x90	; 144
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	9c 87       	std	Y+12, r25	; 0x0c
     15a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     15c:	8b 85       	ldd	r24, Y+11	; 0x0b
     15e:	9c 85       	ldd	r25, Y+12	; 0x0c
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <blinking_led+0xd0>
     164:	9c 87       	std	Y+12, r25	; 0x0c
     166:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     168:	89 85       	ldd	r24, Y+9	; 0x09
     16a:	9a 85       	ldd	r25, Y+10	; 0x0a
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	9a 87       	std	Y+10, r25	; 0x0a
     170:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     172:	89 85       	ldd	r24, Y+9	; 0x09
     174:	9a 85       	ldd	r25, Y+10	; 0x0a
     176:	89 2b       	or	r24, r25
     178:	69 f7       	brne	.-38     	; 0x154 <blinking_led+0xc4>
     17a:	14 c0       	rjmp	.+40     	; 0x1a4 <blinking_led+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     17c:	6d 81       	ldd	r22, Y+5	; 0x05
     17e:	7e 81       	ldd	r23, Y+6	; 0x06
     180:	8f 81       	ldd	r24, Y+7	; 0x07
     182:	98 85       	ldd	r25, Y+8	; 0x08
     184:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     188:	dc 01       	movw	r26, r24
     18a:	cb 01       	movw	r24, r22
     18c:	9a 87       	std	Y+10, r25	; 0x0a
     18e:	89 87       	std	Y+9, r24	; 0x09
     190:	89 85       	ldd	r24, Y+9	; 0x09
     192:	9a 85       	ldd	r25, Y+10	; 0x0a
     194:	9e 87       	std	Y+14, r25	; 0x0e
     196:	8d 87       	std	Y+13, r24	; 0x0d
     198:	8d 85       	ldd	r24, Y+13	; 0x0d
     19a:	9e 85       	ldd	r25, Y+14	; 0x0e
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <blinking_led+0x10c>
     1a0:	9e 87       	std	Y+14, r25	; 0x0e
     1a2:	8d 87       	std	Y+13, r24	; 0x0d
							//PORTB |= 0b00100000;
		_delay_ms(1000);	// wait 1 second
		PORTB &= 0xDF;		// PB5 = 0 -> LED OFF
     1a4:	85 e2       	ldi	r24, 0x25	; 37
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	25 e2       	ldi	r18, 0x25	; 37
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	f9 01       	movw	r30, r18
     1ae:	20 81       	ld	r18, Z
     1b0:	2f 7d       	andi	r18, 0xDF	; 223
     1b2:	fc 01       	movw	r30, r24
     1b4:	20 83       	st	Z, r18
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	aa e7       	ldi	r26, 0x7A	; 122
     1bc:	b4 e4       	ldi	r27, 0x44	; 68
     1be:	8f 87       	std	Y+15, r24	; 0x0f
     1c0:	98 8b       	std	Y+16, r25	; 0x10
     1c2:	a9 8b       	std	Y+17, r26	; 0x11
     1c4:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	4a e7       	ldi	r20, 0x7A	; 122
     1cc:	55 e4       	ldi	r21, 0x45	; 69
     1ce:	6f 85       	ldd	r22, Y+15	; 0x0f
     1d0:	78 89       	ldd	r23, Y+16	; 0x10
     1d2:	89 89       	ldd	r24, Y+17	; 0x11
     1d4:	9a 89       	ldd	r25, Y+18	; 0x12
     1d6:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     1da:	dc 01       	movw	r26, r24
     1dc:	cb 01       	movw	r24, r22
     1de:	8b 8b       	std	Y+19, r24	; 0x13
     1e0:	9c 8b       	std	Y+20, r25	; 0x14
     1e2:	ad 8b       	std	Y+21, r26	; 0x15
     1e4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e8       	ldi	r20, 0x80	; 128
     1ec:	5f e3       	ldi	r21, 0x3F	; 63
     1ee:	6b 89       	ldd	r22, Y+19	; 0x13
     1f0:	7c 89       	ldd	r23, Y+20	; 0x14
     1f2:	8d 89       	ldd	r24, Y+21	; 0x15
     1f4:	9e 89       	ldd	r25, Y+22	; 0x16
     1f6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__cmpsf2>
     1fa:	88 23       	and	r24, r24
     1fc:	2c f4       	brge	.+10     	; 0x208 <blinking_led+0x178>
		__ticks = 1;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	98 8f       	std	Y+24, r25	; 0x18
     204:	8f 8b       	std	Y+23, r24	; 0x17
     206:	3f c0       	rjmp	.+126    	; 0x286 <blinking_led+0x1f6>
	else if (__tmp > 65535)
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	3f ef       	ldi	r19, 0xFF	; 255
     20c:	4f e7       	ldi	r20, 0x7F	; 127
     20e:	57 e4       	ldi	r21, 0x47	; 71
     210:	6b 89       	ldd	r22, Y+19	; 0x13
     212:	7c 89       	ldd	r23, Y+20	; 0x14
     214:	8d 89       	ldd	r24, Y+21	; 0x15
     216:	9e 89       	ldd	r25, Y+22	; 0x16
     218:	0e 94 fb 07 	call	0xff6	; 0xff6 <__gesf2>
     21c:	18 16       	cp	r1, r24
     21e:	4c f5       	brge	.+82     	; 0x272 <blinking_led+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e2       	ldi	r20, 0x20	; 32
     226:	51 e4       	ldi	r21, 0x41	; 65
     228:	6f 85       	ldd	r22, Y+15	; 0x0f
     22a:	78 89       	ldd	r23, Y+16	; 0x10
     22c:	89 89       	ldd	r24, Y+17	; 0x11
     22e:	9a 89       	ldd	r25, Y+18	; 0x12
     230:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	bc 01       	movw	r22, r24
     23a:	cd 01       	movw	r24, r26
     23c:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	98 8f       	std	Y+24, r25	; 0x18
     246:	8f 8b       	std	Y+23, r24	; 0x17
     248:	0f c0       	rjmp	.+30     	; 0x268 <blinking_led+0x1d8>
     24a:	80 e9       	ldi	r24, 0x90	; 144
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	9a 8f       	std	Y+26, r25	; 0x1a
     250:	89 8f       	std	Y+25, r24	; 0x19
     252:	89 8d       	ldd	r24, Y+25	; 0x19
     254:	9a 8d       	ldd	r25, Y+26	; 0x1a
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <blinking_led+0x1c6>
     25a:	9a 8f       	std	Y+26, r25	; 0x1a
     25c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     25e:	8f 89       	ldd	r24, Y+23	; 0x17
     260:	98 8d       	ldd	r25, Y+24	; 0x18
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	98 8f       	std	Y+24, r25	; 0x18
     266:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     268:	8f 89       	ldd	r24, Y+23	; 0x17
     26a:	98 8d       	ldd	r25, Y+24	; 0x18
     26c:	89 2b       	or	r24, r25
     26e:	69 f7       	brne	.-38     	; 0x24a <blinking_led+0x1ba>
     270:	14 c0       	rjmp	.+40     	; 0x29a <blinking_led+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     272:	6b 89       	ldd	r22, Y+19	; 0x13
     274:	7c 89       	ldd	r23, Y+20	; 0x14
     276:	8d 89       	ldd	r24, Y+21	; 0x15
     278:	9e 89       	ldd	r25, Y+22	; 0x16
     27a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     27e:	dc 01       	movw	r26, r24
     280:	cb 01       	movw	r24, r22
     282:	98 8f       	std	Y+24, r25	; 0x18
     284:	8f 8b       	std	Y+23, r24	; 0x17
     286:	8f 89       	ldd	r24, Y+23	; 0x17
     288:	98 8d       	ldd	r25, Y+24	; 0x18
     28a:	9c 8f       	std	Y+28, r25	; 0x1c
     28c:	8b 8f       	std	Y+27, r24	; 0x1b
     28e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     290:	9c 8d       	ldd	r25, Y+28	; 0x1c
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <blinking_led+0x202>
     296:	9c 8f       	std	Y+28, r25	; 0x1c
     298:	8b 8f       	std	Y+27, r24	; 0x1b
							//PORTB &= 0b11011111;
		_delay_ms(1000);	// wait 1 second
	}
     29a:	09 cf       	rjmp	.-494    	; 0xae <blinking_led+0x1e>

0000029c <initTC1>:
unsigned char microseg = 0;

// function to initialize TC0 (Timer/Counter0) and Interrupts
//-----------------------------------------------------------

void initTC1(){
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;			// Normal mode
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	fc 01       	movw	r30, r24
     2aa:	10 82       	st	Z, r1
	TCCR1B |= (1<<CS10); 	// Prescaler = 1
     2ac:	81 e8       	ldi	r24, 0x81	; 129
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	21 e8       	ldi	r18, 0x81	; 129
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	f9 01       	movw	r30, r18
     2b6:	20 81       	ld	r18, Z
     2b8:	21 60       	ori	r18, 0x01	; 1
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18
	TIMSK1 |= (1<<TOIE1);	// enable Overflow Interrupts
     2be:	8f e6       	ldi	r24, 0x6F	; 111
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	2f e6       	ldi	r18, 0x6F	; 111
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	20 81       	ld	r18, Z
     2ca:	21 60       	ori	r18, 0x01	; 1
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
	SREG |= 0x80;			// Global Interrupt Enable
     2d0:	8f e5       	ldi	r24, 0x5F	; 95
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	2f e5       	ldi	r18, 0x5F	; 95
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	20 68       	ori	r18, 0x80	; 128
     2de:	fc 01       	movw	r30, r24
     2e0:	20 83       	st	Z, r18

}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <initPWM>:
void initPWM() {
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
	OCR2A = 0x00; //0%
     2f0:	83 eb       	ldi	r24, 0xB3	; 179
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	fc 01       	movw	r30, r24
     2f6:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2A1); //Set non-inverting mode
     2f8:	80 eb       	ldi	r24, 0xB0	; 176
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	20 eb       	ldi	r18, 0xB0	; 176
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	f9 01       	movw	r30, r18
     302:	20 81       	ld	r18, Z
     304:	20 68       	ori	r18, 0x80	; 128
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
	TCCR2A |= (1 << WGM21) | (1 << WGM20); // Fast PWM Mode
     30a:	80 eb       	ldi	r24, 0xB0	; 176
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	20 eb       	ldi	r18, 0xB0	; 176
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	f9 01       	movw	r30, r18
     314:	20 81       	ld	r18, Z
     316:	23 60       	ori	r18, 0x03	; 3
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
	TCCR2B |= (1 << CS21); 	// Prescaler = 8
     31c:	81 eb       	ldi	r24, 0xB1	; 177
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	21 eb       	ldi	r18, 0xB1	; 177
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	22 60       	ori	r18, 0x02	; 2
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <__vector_13>:

// Interrupt Service Routine for TC0 Overflow
//-------------------------------------------

ISR(TIMER1_OVF_vect) {
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	00 90 5f 00 	lds	r0, 0x005F
     33c:	0f 92       	push	r0
     33e:	11 24       	eor	r1, r1
     340:	8f 93       	push	r24
     342:	9f 93       	push	r25
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
	microseg += 16;
     350:	80 91 02 01 	lds	r24, 0x0102
     354:	80 5f       	subi	r24, 0xF0	; 240
     356:	80 93 02 01 	sts	0x0102, r24
	echo = PINB & 0b00010000;
     35a:	83 e2       	ldi	r24, 0x23	; 35
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	fc 01       	movw	r30, r24
     360:	80 81       	ld	r24, Z
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	80 71       	andi	r24, 0x10	; 16
     368:	99 27       	eor	r25, r25
     36a:	90 93 01 01 	sts	0x0101, r25
     36e:	80 93 00 01 	sts	0x0100, r24
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	0f 90       	pop	r0
     380:	00 92 5f 00 	sts	0x005F, r0
     384:	0f 90       	pop	r0
     386:	1f 90       	pop	r1
     388:	18 95       	reti

0000038a <dist_sensor>:
//-------------------------------------------

// main program
//--------------

int dist_sensor(void) {
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	a2 97       	sbiw	r28, 0x22	; 34
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61

	// PB5 (connected to LED) is output
	DDRB = 0b00101100; //Set as output pin 13(led), pin 11(Fan), pin 10(Trigger)
     39e:	84 e2       	ldi	r24, 0x24	; 36
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	2c e2       	ldi	r18, 0x2C	; 44
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
	PORTB &= 0b11111011; 		// PB2 = 1 (Trigger)
     3a8:	85 e2       	ldi	r24, 0x25	; 37
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	25 e2       	ldi	r18, 0x25	; 37
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	2b 7f       	andi	r18, 0xFB	; 251
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18

	// initialize Timer/Counter0 and associated interrupts
	initTC1();
     3ba:	0e 94 4e 01 	call	0x29c	; 0x29c <initTC1>
	initPWM();
     3be:	0e 94 74 01 	call	0x2e8	; 0x2e8 <initPWM>

	// forever loop
	while(1) { // empty loop!

		PORTB &= 0b11111011; 		// PB2 = 0 (Trigger)
     3c2:	85 e2       	ldi	r24, 0x25	; 37
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	25 e2       	ldi	r18, 0x25	; 37
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	f9 01       	movw	r30, r18
     3cc:	20 81       	ld	r18, Z
     3ce:	2b 7f       	andi	r18, 0xFB	; 251
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	a0 ea       	ldi	r26, 0xA0	; 160
     3da:	b0 e4       	ldi	r27, 0x40	; 64
     3dc:	8f 83       	std	Y+7, r24	; 0x07
     3de:	98 87       	std	Y+8, r25	; 0x08
     3e0:	a9 87       	std	Y+9, r26	; 0x09
     3e2:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	4a e7       	ldi	r20, 0x7A	; 122
     3ea:	55 e4       	ldi	r21, 0x45	; 69
     3ec:	6f 81       	ldd	r22, Y+7	; 0x07
     3ee:	78 85       	ldd	r23, Y+8	; 0x08
     3f0:	89 85       	ldd	r24, Y+9	; 0x09
     3f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f4:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	8b 87       	std	Y+11, r24	; 0x0b
     3fe:	9c 87       	std	Y+12, r25	; 0x0c
     400:	ad 87       	std	Y+13, r26	; 0x0d
     402:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e8       	ldi	r20, 0x80	; 128
     40a:	5f e3       	ldi	r21, 0x3F	; 63
     40c:	6b 85       	ldd	r22, Y+11	; 0x0b
     40e:	7c 85       	ldd	r23, Y+12	; 0x0c
     410:	8d 85       	ldd	r24, Y+13	; 0x0d
     412:	9e 85       	ldd	r25, Y+14	; 0x0e
     414:	0e 94 9c 06 	call	0xd38	; 0xd38 <__cmpsf2>
     418:	88 23       	and	r24, r24
     41a:	2c f4       	brge	.+10     	; 0x426 <dist_sensor+0x9c>
		__ticks = 1;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	98 8b       	std	Y+16, r25	; 0x10
     422:	8f 87       	std	Y+15, r24	; 0x0f
     424:	3f c0       	rjmp	.+126    	; 0x4a4 <dist_sensor+0x11a>
	else if (__tmp > 65535)
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	3f ef       	ldi	r19, 0xFF	; 255
     42a:	4f e7       	ldi	r20, 0x7F	; 127
     42c:	57 e4       	ldi	r21, 0x47	; 71
     42e:	6b 85       	ldd	r22, Y+11	; 0x0b
     430:	7c 85       	ldd	r23, Y+12	; 0x0c
     432:	8d 85       	ldd	r24, Y+13	; 0x0d
     434:	9e 85       	ldd	r25, Y+14	; 0x0e
     436:	0e 94 fb 07 	call	0xff6	; 0xff6 <__gesf2>
     43a:	18 16       	cp	r1, r24
     43c:	4c f5       	brge	.+82     	; 0x490 <dist_sensor+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e2       	ldi	r20, 0x20	; 32
     444:	51 e4       	ldi	r21, 0x41	; 65
     446:	6f 81       	ldd	r22, Y+7	; 0x07
     448:	78 85       	ldd	r23, Y+8	; 0x08
     44a:	89 85       	ldd	r24, Y+9	; 0x09
     44c:	9a 85       	ldd	r25, Y+10	; 0x0a
     44e:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     452:	dc 01       	movw	r26, r24
     454:	cb 01       	movw	r24, r22
     456:	bc 01       	movw	r22, r24
     458:	cd 01       	movw	r24, r26
     45a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     45e:	dc 01       	movw	r26, r24
     460:	cb 01       	movw	r24, r22
     462:	98 8b       	std	Y+16, r25	; 0x10
     464:	8f 87       	std	Y+15, r24	; 0x0f
     466:	0f c0       	rjmp	.+30     	; 0x486 <dist_sensor+0xfc>
     468:	80 e9       	ldi	r24, 0x90	; 144
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	9a 8b       	std	Y+18, r25	; 0x12
     46e:	89 8b       	std	Y+17, r24	; 0x11
     470:	89 89       	ldd	r24, Y+17	; 0x11
     472:	9a 89       	ldd	r25, Y+18	; 0x12
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <dist_sensor+0xea>
     478:	9a 8b       	std	Y+18, r25	; 0x12
     47a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     47c:	8f 85       	ldd	r24, Y+15	; 0x0f
     47e:	98 89       	ldd	r25, Y+16	; 0x10
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	98 8b       	std	Y+16, r25	; 0x10
     484:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     486:	8f 85       	ldd	r24, Y+15	; 0x0f
     488:	98 89       	ldd	r25, Y+16	; 0x10
     48a:	89 2b       	or	r24, r25
     48c:	69 f7       	brne	.-38     	; 0x468 <dist_sensor+0xde>
     48e:	14 c0       	rjmp	.+40     	; 0x4b8 <dist_sensor+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     490:	6b 85       	ldd	r22, Y+11	; 0x0b
     492:	7c 85       	ldd	r23, Y+12	; 0x0c
     494:	8d 85       	ldd	r24, Y+13	; 0x0d
     496:	9e 85       	ldd	r25, Y+14	; 0x0e
     498:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	98 8b       	std	Y+16, r25	; 0x10
     4a2:	8f 87       	std	Y+15, r24	; 0x0f
     4a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4a6:	98 89       	ldd	r25, Y+16	; 0x10
     4a8:	9c 8b       	std	Y+20, r25	; 0x14
     4aa:	8b 8b       	std	Y+19, r24	; 0x13
     4ac:	8b 89       	ldd	r24, Y+19	; 0x13
     4ae:	9c 89       	ldd	r25, Y+20	; 0x14
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <dist_sensor+0x126>
     4b4:	9c 8b       	std	Y+20, r25	; 0x14
     4b6:	8b 8b       	std	Y+19, r24	; 0x13
		_delay_ms(5);	// wait 1 second
		PORTB |= 0b00000100; 		// PB2 = 1 (Trigger)
     4b8:	85 e2       	ldi	r24, 0x25	; 37
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	25 e2       	ldi	r18, 0x25	; 37
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	24 60       	ori	r18, 0x04	; 4
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	a0 e2       	ldi	r26, 0x20	; 32
     4d0:	b1 e4       	ldi	r27, 0x41	; 65
     4d2:	8d 8b       	std	Y+21, r24	; 0x15
     4d4:	9e 8b       	std	Y+22, r25	; 0x16
     4d6:	af 8b       	std	Y+23, r26	; 0x17
     4d8:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	4a e7       	ldi	r20, 0x7A	; 122
     4e0:	55 e4       	ldi	r21, 0x45	; 69
     4e2:	6d 89       	ldd	r22, Y+21	; 0x15
     4e4:	7e 89       	ldd	r23, Y+22	; 0x16
     4e6:	8f 89       	ldd	r24, Y+23	; 0x17
     4e8:	98 8d       	ldd	r25, Y+24	; 0x18
     4ea:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	89 8f       	std	Y+25, r24	; 0x19
     4f4:	9a 8f       	std	Y+26, r25	; 0x1a
     4f6:	ab 8f       	std	Y+27, r26	; 0x1b
     4f8:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	5f e3       	ldi	r21, 0x3F	; 63
     502:	69 8d       	ldd	r22, Y+25	; 0x19
     504:	7a 8d       	ldd	r23, Y+26	; 0x1a
     506:	8b 8d       	ldd	r24, Y+27	; 0x1b
     508:	9c 8d       	ldd	r25, Y+28	; 0x1c
     50a:	0e 94 9c 06 	call	0xd38	; 0xd38 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	2c f4       	brge	.+10     	; 0x51c <dist_sensor+0x192>
		__ticks = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9e 8f       	std	Y+30, r25	; 0x1e
     518:	8d 8f       	std	Y+29, r24	; 0x1d
     51a:	3f c0       	rjmp	.+126    	; 0x59a <dist_sensor+0x210>
	else if (__tmp > 65535)
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	3f ef       	ldi	r19, 0xFF	; 255
     520:	4f e7       	ldi	r20, 0x7F	; 127
     522:	57 e4       	ldi	r21, 0x47	; 71
     524:	69 8d       	ldd	r22, Y+25	; 0x19
     526:	7a 8d       	ldd	r23, Y+26	; 0x1a
     528:	8b 8d       	ldd	r24, Y+27	; 0x1b
     52a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     52c:	0e 94 fb 07 	call	0xff6	; 0xff6 <__gesf2>
     530:	18 16       	cp	r1, r24
     532:	4c f5       	brge	.+82     	; 0x586 <dist_sensor+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	6d 89       	ldd	r22, Y+21	; 0x15
     53e:	7e 89       	ldd	r23, Y+22	; 0x16
     540:	8f 89       	ldd	r24, Y+23	; 0x17
     542:	98 8d       	ldd	r25, Y+24	; 0x18
     544:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	9e 8f       	std	Y+30, r25	; 0x1e
     55a:	8d 8f       	std	Y+29, r24	; 0x1d
     55c:	0f c0       	rjmp	.+30     	; 0x57c <dist_sensor+0x1f2>
     55e:	80 e9       	ldi	r24, 0x90	; 144
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	98 a3       	std	Y+32, r25	; 0x20
     564:	8f 8f       	std	Y+31, r24	; 0x1f
     566:	8f 8d       	ldd	r24, Y+31	; 0x1f
     568:	98 a1       	ldd	r25, Y+32	; 0x20
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <dist_sensor+0x1e0>
     56e:	98 a3       	std	Y+32, r25	; 0x20
     570:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     572:	8d 8d       	ldd	r24, Y+29	; 0x1d
     574:	9e 8d       	ldd	r25, Y+30	; 0x1e
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	9e 8f       	std	Y+30, r25	; 0x1e
     57a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     57e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     580:	89 2b       	or	r24, r25
     582:	69 f7       	brne	.-38     	; 0x55e <dist_sensor+0x1d4>
     584:	14 c0       	rjmp	.+40     	; 0x5ae <dist_sensor+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     586:	69 8d       	ldd	r22, Y+25	; 0x19
     588:	7a 8d       	ldd	r23, Y+26	; 0x1a
     58a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     58c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     58e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9e 8f       	std	Y+30, r25	; 0x1e
     598:	8d 8f       	std	Y+29, r24	; 0x1d
     59a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     59c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     59e:	9a a3       	std	Y+34, r25	; 0x22
     5a0:	89 a3       	std	Y+33, r24	; 0x21
     5a2:	89 a1       	ldd	r24, Y+33	; 0x21
     5a4:	9a a1       	ldd	r25, Y+34	; 0x22
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <dist_sensor+0x21c>
     5aa:	9a a3       	std	Y+34, r25	; 0x22
     5ac:	89 a3       	std	Y+33, r24	; 0x21
		_delay_ms(10);	// wait 1 second
		PORTB &= 0b11111011; 		// PB2 = 0 (Trigger)
     5ae:	85 e2       	ldi	r24, 0x25	; 37
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	25 e2       	ldi	r18, 0x25	; 37
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	2b 7f       	andi	r18, 0xFB	; 251
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18

		PORTB |= 0b00100000;		// PB5 = 1 (Led On)
     5c0:	85 e2       	ldi	r24, 0x25	; 37
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	25 e2       	ldi	r18, 0x25	; 37
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	20 81       	ld	r18, Z
     5cc:	20 62       	ori	r18, 0x20	; 32
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 83       	st	Z, r18
		microseg = 0;
     5d2:	10 92 02 01 	sts	0x0102, r1
		while(echo==0 || microseg>100);
     5d6:	00 00       	nop
     5d8:	80 91 00 01 	lds	r24, 0x0100
     5dc:	90 91 01 01 	lds	r25, 0x0101
     5e0:	89 2b       	or	r24, r25
     5e2:	d1 f3       	breq	.-12     	; 0x5d8 <dist_sensor+0x24e>
     5e4:	80 91 02 01 	lds	r24, 0x0102
     5e8:	85 36       	cpi	r24, 0x65	; 101
     5ea:	b0 f7       	brcc	.-20     	; 0x5d8 <dist_sensor+0x24e>
		microseg = 0;
     5ec:	10 92 02 01 	sts	0x0102, r1
		while(echo>0 || microseg>100);
     5f0:	00 00       	nop
     5f2:	80 91 00 01 	lds	r24, 0x0100
     5f6:	90 91 01 01 	lds	r25, 0x0101
     5fa:	18 16       	cp	r1, r24
     5fc:	19 06       	cpc	r1, r25
     5fe:	cc f3       	brlt	.-14     	; 0x5f2 <dist_sensor+0x268>
     600:	80 91 02 01 	lds	r24, 0x0102
     604:	85 36       	cpi	r24, 0x65	; 101
     606:	a8 f7       	brcc	.-22     	; 0x5f2 <dist_sensor+0x268>
		PORTB &= 0xDF;		// PB5 = 0 (Led Off)
     608:	85 e2       	ldi	r24, 0x25	; 37
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	25 e2       	ldi	r18, 0x25	; 37
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	f9 01       	movw	r30, r18
     612:	20 81       	ld	r18, Z
     614:	2f 7d       	andi	r18, 0xDF	; 223
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18
		double dist = microseg/58;
     61a:	80 91 02 01 	lds	r24, 0x0102
     61e:	98 2f       	mov	r25, r24
     620:	96 95       	lsr	r25
     622:	87 e4       	ldi	r24, 0x47	; 71
     624:	98 9f       	mul	r25, r24
     626:	81 2d       	mov	r24, r1
     628:	11 24       	eor	r1, r1
     62a:	86 95       	lsr	r24
     62c:	86 95       	lsr	r24
     62e:	86 95       	lsr	r24
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	09 2e       	mov	r0, r25
     636:	00 0c       	add	r0, r0
     638:	aa 0b       	sbc	r26, r26
     63a:	bb 0b       	sbc	r27, r27
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	0e 94 4b 07 	call	0xe96	; 0xe96 <__floatsisf>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	89 83       	std	Y+1, r24	; 0x01
     64a:	9a 83       	std	Y+2, r25	; 0x02
     64c:	ab 83       	std	Y+3, r26	; 0x03
     64e:	bc 83       	std	Y+4, r27	; 0x04
		int PWMon = (dist-2)/400*255;
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e4       	ldi	r21, 0x40	; 64
     658:	69 81       	ldd	r22, Y+1	; 0x01
     65a:	7a 81       	ldd	r23, Y+2	; 0x02
     65c:	8b 81       	ldd	r24, Y+3	; 0x03
     65e:	9c 81       	ldd	r25, Y+4	; 0x04
     660:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__subsf3>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	48 ec       	ldi	r20, 0xC8	; 200
     66e:	53 e4       	ldi	r21, 0x43	; 67
     670:	bc 01       	movw	r22, r24
     672:	cd 01       	movw	r24, r26
     674:	0e 94 a1 06 	call	0xd42	; 0xd42 <__divsf3>
     678:	dc 01       	movw	r26, r24
     67a:	cb 01       	movw	r24, r22
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	4f e7       	ldi	r20, 0x7F	; 127
     682:	53 e4       	ldi	r21, 0x43	; 67
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	0e 94 13 07 	call	0xe26	; 0xe26 <__fixsfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	9e 83       	std	Y+6, r25	; 0x06
     69e:	8d 83       	std	Y+5, r24	; 0x05
		OCR2A = PWMon;
     6a0:	83 eb       	ldi	r24, 0xB3	; 179
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	2d 81       	ldd	r18, Y+5	; 0x05
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
	}
     6aa:	8b ce       	rjmp	.-746    	; 0x3c2 <dist_sensor+0x38>

000006ac <init_TC0_ints>:
#include <avr/interrupt.h>

// function to initialize TC0 (Timer/Counter0) and Interrupts
//-----------------------------------------------------------

void init_TC0_ints(){
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;			// Normal mode
     6b4:	84 e4       	ldi	r24, 0x44	; 68
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	fc 01       	movw	r30, r24
     6ba:	10 82       	st	Z, r1
	TCCR0B |= (1<<CS02); 	// Prescaler = 256
     6bc:	85 e4       	ldi	r24, 0x45	; 69
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	25 e4       	ldi	r18, 0x45	; 69
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	24 60       	ori	r18, 0x04	; 4
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
	TIMSK0 |= (1<<TOIE0);	// enable Overflow Interrupts
     6ce:	8e e6       	ldi	r24, 0x6E	; 110
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	2e e6       	ldi	r18, 0x6E	; 110
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	f9 01       	movw	r30, r18
     6d8:	20 81       	ld	r18, Z
     6da:	21 60       	ori	r18, 0x01	; 1
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
	SREG |= 0x80;			// Global Interrupt Enable
     6e0:	8f e5       	ldi	r24, 0x5F	; 95
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	2f e5       	ldi	r18, 0x5F	; 95
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	f9 01       	movw	r30, r18
     6ea:	20 81       	ld	r18, Z
     6ec:	20 68       	ori	r18, 0x80	; 128
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18

}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <init_PWM>:
void init_PWM() {
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
	OCR2A = 0x00; //0%
     700:	83 eb       	ldi	r24, 0xB3	; 179
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	fc 01       	movw	r30, r24
     706:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2A1); //Set non-inverting mode
     708:	80 eb       	ldi	r24, 0xB0	; 176
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	20 eb       	ldi	r18, 0xB0	; 176
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	20 68       	ori	r18, 0x80	; 128
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
	TCCR2A |= (1 << WGM21) | (1 << WGM20); // Fast PWM Mode
     71a:	80 eb       	ldi	r24, 0xB0	; 176
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	20 eb       	ldi	r18, 0xB0	; 176
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	23 60       	ori	r18, 0x03	; 3
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
	TCCR2B |= (1 << CS21); 	// Prescaler = 8
     72c:	81 eb       	ldi	r24, 0xB1	; 177
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	21 eb       	ldi	r18, 0xB1	; 177
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	22 60       	ori	r18, 0x02	; 2
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
}
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <__vector_16>:

// Interrupt Service Routine for TC0 Overflow
//-------------------------------------------

ISR(TIMER0_OVF_vect) {
     744:	1f 92       	push	r1
     746:	0f 92       	push	r0
     748:	00 90 5f 00 	lds	r0, 0x005F
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	ef 93       	push	r30
     758:	ff 93       	push	r31
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	00 d0       	rcall	.+0      	; 0x760 <__vector_16+0x1c>
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62

	static unsigned char i=0;
	i++;
     764:	80 91 03 01 	lds	r24, 0x0103
     768:	8f 5f       	subi	r24, 0xFF	; 255
     76a:	80 93 03 01 	sts	0x0103, r24
	if (i==244) {
     76e:	80 91 03 01 	lds	r24, 0x0103
     772:	84 3f       	cpi	r24, 0xF4	; 244
     774:	d1 f4       	brne	.+52     	; 0x7aa <__vector_16+0x66>
		i = 0;
     776:	10 92 03 01 	sts	0x0103, r1
			int PWMon = OCR2A+15;
     77a:	83 eb       	ldi	r24, 0xB3	; 179
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	fc 01       	movw	r30, r24
     780:	80 81       	ld	r24, Z
     782:	88 2f       	mov	r24, r24
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0f 96       	adiw	r24, 0x0f	; 15
     788:	9a 83       	std	Y+2, r25	; 0x02
     78a:	89 83       	std	Y+1, r24	; 0x01
			if(PWMon > 255) PWMon = 255;
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	8f 3f       	cpi	r24, 0xFF	; 255
     792:	91 05       	cpc	r25, r1
     794:	29 f0       	breq	.+10     	; 0x7a0 <__vector_16+0x5c>
     796:	24 f0       	brlt	.+8      	; 0x7a0 <__vector_16+0x5c>
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01
			OCR2A = PWMon;
     7a0:	83 eb       	ldi	r24, 0xB3	; 179
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	29 81       	ldd	r18, Y+1	; 0x01
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
	}
}
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	ff 91       	pop	r31
     7b4:	ef 91       	pop	r30
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	00 92 5f 00 	sts	0x005F, r0
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <fan>:
//-------------------------------------------

// main program
//--------------

int fan(void) {
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62

	// PB5 (connected to LED) is output
	DDRB = 0b00101000;
     7d0:	84 e2       	ldi	r24, 0x24	; 36
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	28 e2       	ldi	r18, 0x28	; 40
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18

	// initialize Timer/Counter0 and associated interrupts
	init_TC0_ints();
     7da:	0e 94 56 03 	call	0x6ac	; 0x6ac <init_TC0_ints>
	init_PWM();
     7de:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init_PWM>

	// forever loop
	while(1); // empty loop!
     7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <fan+0x1a>

000007e4 <init_TC0>:

// function to initialize the Timer/Counter0 (TC0)
//------------------------------------------------

void init_TC0()
{
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;			// Normal mode
     7ec:	84 e4       	ldi	r24, 0x44	; 68
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	fc 01       	movw	r30, r24
     7f2:	10 82       	st	Z, r1
	TCCR0B |= (1<<CS02);	// Prescaler = 256
     7f4:	85 e4       	ldi	r24, 0x45	; 69
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	25 e4       	ldi	r18, 0x45	; 69
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	20 81       	ld	r18, Z
     800:	24 60       	ori	r18, 0x04	; 4
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <delay>:

// delay function (based on TC0)
//------------------------------

void delay()
{
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	00 d0       	rcall	.+0      	; 0x812 <delay+0x6>
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
	unsigned int i;
	for (i=1;i<=100;i++)
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	9a 83       	std	Y+2, r25	; 0x02
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	1d c0       	rjmp	.+58     	; 0x85a <delay+0x4e>
	{
		TCNT0 = 0;						// init count
     820:	86 e4       	ldi	r24, 0x46	; 70
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	fc 01       	movw	r30, r24
     826:	10 82       	st	Z, r1
		while((TIFR0 & (1<<TOV0))==0);	// wait overflow
     828:	00 00       	nop
     82a:	85 e3       	ldi	r24, 0x35	; 53
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	fc 01       	movw	r30, r24
     830:	80 81       	ld	r24, Z
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	81 70       	andi	r24, 0x01	; 1
     838:	99 27       	eor	r25, r25
     83a:	89 2b       	or	r24, r25
     83c:	b1 f3       	breq	.-20     	; 0x82a <delay+0x1e>
		TIFR0 |= (1<<TOV0);				// clear the overflow flag (by writing a '1'!)
     83e:	85 e3       	ldi	r24, 0x35	; 53
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	25 e3       	ldi	r18, 0x35	; 53
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	f9 01       	movw	r30, r18
     848:	20 81       	ld	r18, Z
     84a:	21 60       	ori	r18, 0x01	; 1
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
//------------------------------

void delay()
{
	unsigned int i;
	for (i=1;i<=100;i++)
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	9a 83       	std	Y+2, r25	; 0x02
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	9a 81       	ldd	r25, Y+2	; 0x02
     85e:	85 36       	cpi	r24, 0x65	; 101
     860:	91 05       	cpc	r25, r1
     862:	f0 f2       	brcs	.-68     	; 0x820 <delay+0x14>
	{
		TCNT0 = 0;						// init count
		while((TIFR0 & (1<<TOV0))==0);	// wait overflow
		TIFR0 |= (1<<TOV0);				// clear the overflow flag (by writing a '1'!)
	}
}
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <led_blinking_TC0>:

// main program
//--------------

int led_blinking_TC0(void)
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62

	// PB5 (connected to LED) is output
	DDRB = 0b00100000;
     876:	84 e2       	ldi	r24, 0x24	; 36
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	20 e2       	ldi	r18, 0x20	; 32
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18

	// initialize Timer/Counter0
	init_TC0();
     880:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <init_TC0>

	// forever loop
	while(1)
	{

		PORTB |= 0x20;	// PB5=1 -> LED ON
     884:	85 e2       	ldi	r24, 0x25	; 37
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	25 e2       	ldi	r18, 0x25	; 37
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	20 62       	ori	r18, 0x20	; 32
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
		delay();		// wait
     896:	0e 94 06 04 	call	0x80c	; 0x80c <delay>
		PORTB &= 0xDF;	// PB5=0 -> LED OFF
     89a:	85 e2       	ldi	r24, 0x25	; 37
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	25 e2       	ldi	r18, 0x25	; 37
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	2f 7d       	andi	r18, 0xDF	; 223
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
		delay();		// wait
     8ac:	0e 94 06 04 	call	0x80c	; 0x80c <delay>

	}
     8b0:	e9 cf       	rjmp	.-46     	; 0x884 <led_blinking_TC0+0x16>

000008b2 <init_adc>:

// function to initialize the ADC
//-------------------------------

void init_adc()
{
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0);					// Vref = AVcc = 5V;
     8ba:	8c e7       	ldi	r24, 0x7C	; 124
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	20 e4       	ldi	r18, 0x40	; 64
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN)|(7<<ADPS0);		// ADC enabled; Prescaler=128!
     8c4:	8a e7       	ldi	r24, 0x7A	; 122
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	27 e8       	ldi	r18, 0x87	; 135
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <read_adc>:

// function to obtain a measurement using the ADC
//-----------------------------------------------

unsigned int read_adc(unsigned int channel)
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	00 d0       	rcall	.+0      	; 0x8da <read_adc+0x6>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <read_adc+0x8>
     8dc:	00 d0       	rcall	.+0      	; 0x8de <read_adc+0xa>
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	9e 83       	std	Y+6, r25	; 0x06
     8e4:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char adch,adcl;
	unsigned int adc;

	// select input channel (0-7)
	channel = channel & 0b00000111;
     8e6:	8d 81       	ldd	r24, Y+5	; 0x05
     8e8:	9e 81       	ldd	r25, Y+6	; 0x06
     8ea:	87 70       	andi	r24, 0x07	; 7
     8ec:	99 27       	eor	r25, r25
     8ee:	9e 83       	std	Y+6, r25	; 0x06
     8f0:	8d 83       	std	Y+5, r24	; 0x05
	ADMUX |= channel;
     8f2:	8c e7       	ldi	r24, 0x7C	; 124
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	2c e7       	ldi	r18, 0x7C	; 124
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	f9 01       	movw	r30, r18
     8fc:	30 81       	ld	r19, Z
     8fe:	2d 81       	ldd	r18, Y+5	; 0x05
     900:	23 2b       	or	r18, r19
     902:	fc 01       	movw	r30, r24
     904:	20 83       	st	Z, r18

	// start single conversion
	ADCSRA |= (1<<ADSC);
     906:	8a e7       	ldi	r24, 0x7A	; 122
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	2a e7       	ldi	r18, 0x7A	; 122
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	20 64       	ori	r18, 0x40	; 64
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18

	// wait for conversion to complete (ADIF=1)
	while((ADCSRA & (1<<ADIF))==0);
     918:	00 00       	nop
     91a:	8a e7       	ldi	r24, 0x7A	; 122
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	fc 01       	movw	r30, r24
     920:	80 81       	ld	r24, Z
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	80 71       	andi	r24, 0x10	; 16
     928:	99 27       	eor	r25, r25
     92a:	89 2b       	or	r24, r25
     92c:	b1 f3       	breq	.-20     	; 0x91a <__stack+0x1b>

	// clear ADIF by writing '1' to it
	ADCSRA |= (1<<ADIF);
     92e:	8a e7       	ldi	r24, 0x7A	; 122
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	2a e7       	ldi	r18, 0x7A	; 122
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	20 61       	ori	r18, 0x10	; 16
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18

	// return ADC value
	adcl = ADCL;
     940:	88 e7       	ldi	r24, 0x78	; 120
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	fc 01       	movw	r30, r24
     946:	80 81       	ld	r24, Z
     948:	89 83       	std	Y+1, r24	; 0x01
	adch = ADCH;
     94a:	89 e7       	ldi	r24, 0x79	; 121
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	fc 01       	movw	r30, r24
     950:	80 81       	ld	r24, Z
     952:	8a 83       	std	Y+2, r24	; 0x02
	adc = (adch<<8)|adcl;
     954:	8a 81       	ldd	r24, Y+2	; 0x02
     956:	88 2f       	mov	r24, r24
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	38 2f       	mov	r19, r24
     95c:	22 27       	eor	r18, r18
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	82 2b       	or	r24, r18
     966:	93 2b       	or	r25, r19
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	8b 83       	std	Y+3, r24	; 0x03
	return(adc);
     96c:	8b 81       	ldd	r24, Y+3	; 0x03
     96e:	9c 81       	ldd	r25, Y+4	; 0x04
}
     970:	26 96       	adiw	r28, 0x06	; 6
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <lm35>:

// main program
//-------------

int lm35()
{
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	a6 97       	sbiw	r28, 0x26	; 38
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
	unsigned int adc_value;
	float millivolts;
	float celsius;

	// PB5 (connected to LED) is output
	DDRB = (1<<PB5);
     996:	84 e2       	ldi	r24, 0x24	; 36
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	20 e2       	ldi	r18, 0x20	; 32
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18

   // initialize ADC
   init_adc();
     9a0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <init_adc>
   // infinite loop
   while(1)
   {

      // obtain a measurement from channel 0
      adc_value = read_adc(0);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <read_adc>
     9ac:	9a 83       	std	Y+2, r25	; 0x02
     9ae:	89 83       	std	Y+1, r24	; 0x01

      // convert to degrees Celsius
      millivolts = (adc_value/1024.0)*5000;   // 10 bit ADC; Vref=5V
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	cc 01       	movw	r24, r24
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	bc 01       	movw	r22, r24
     9bc:	cd 01       	movw	r24, r26
     9be:	0e 94 49 07 	call	0xe92	; 0xe92 <__floatunsisf>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e8       	ldi	r20, 0x80	; 128
     9cc:	54 e4       	ldi	r21, 0x44	; 68
     9ce:	bc 01       	movw	r22, r24
     9d0:	cd 01       	movw	r24, r26
     9d2:	0e 94 a1 06 	call	0xd42	; 0xd42 <__divsf3>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e4       	ldi	r19, 0x40	; 64
     9de:	4c e9       	ldi	r20, 0x9C	; 156
     9e0:	55 e4       	ldi	r21, 0x45	; 69
     9e2:	bc 01       	movw	r22, r24
     9e4:	cd 01       	movw	r24, r26
     9e6:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	8b 83       	std	Y+3, r24	; 0x03
     9f0:	9c 83       	std	Y+4, r25	; 0x04
     9f2:	ad 83       	std	Y+5, r26	; 0x05
     9f4:	be 83       	std	Y+6, r27	; 0x06
      celsius = millivolts/10;                // 10mV / �C
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e2       	ldi	r20, 0x20	; 32
     9fc:	51 e4       	ldi	r21, 0x41	; 65
     9fe:	6b 81       	ldd	r22, Y+3	; 0x03
     a00:	7c 81       	ldd	r23, Y+4	; 0x04
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
     a04:	9e 81       	ldd	r25, Y+6	; 0x06
     a06:	0e 94 a1 06 	call	0xd42	; 0xd42 <__divsf3>
     a0a:	dc 01       	movw	r26, r24
     a0c:	cb 01       	movw	r24, r22
     a0e:	8f 83       	std	Y+7, r24	; 0x07
     a10:	98 87       	std	Y+8, r25	; 0x08
     a12:	a9 87       	std	Y+9, r26	; 0x09
     a14:	ba 87       	std	Y+10, r27	; 0x0a
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e8       	ldi	r25, 0x80	; 128
     a1a:	ab e3       	ldi	r26, 0x3B	; 59
     a1c:	b4 e4       	ldi	r27, 0x44	; 68
     a1e:	8b 87       	std	Y+11, r24	; 0x0b
     a20:	9c 87       	std	Y+12, r25	; 0x0c
     a22:	ad 87       	std	Y+13, r26	; 0x0d
     a24:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	4a e7       	ldi	r20, 0x7A	; 122
     a2c:	55 e4       	ldi	r21, 0x45	; 69
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	8f 87       	std	Y+15, r24	; 0x0f
     a40:	98 8b       	std	Y+16, r25	; 0x10
     a42:	a9 8b       	std	Y+17, r26	; 0x11
     a44:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e8       	ldi	r20, 0x80	; 128
     a4c:	5f e3       	ldi	r21, 0x3F	; 63
     a4e:	6f 85       	ldd	r22, Y+15	; 0x0f
     a50:	78 89       	ldd	r23, Y+16	; 0x10
     a52:	89 89       	ldd	r24, Y+17	; 0x11
     a54:	9a 89       	ldd	r25, Y+18	; 0x12
     a56:	0e 94 9c 06 	call	0xd38	; 0xd38 <__cmpsf2>
     a5a:	88 23       	and	r24, r24
     a5c:	2c f4       	brge	.+10     	; 0xa68 <lm35+0xe6>
		__ticks = 1;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	9c 8b       	std	Y+20, r25	; 0x14
     a64:	8b 8b       	std	Y+19, r24	; 0x13
     a66:	3f c0       	rjmp	.+126    	; 0xae6 <lm35+0x164>
	else if (__tmp > 65535)
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	3f ef       	ldi	r19, 0xFF	; 255
     a6c:	4f e7       	ldi	r20, 0x7F	; 127
     a6e:	57 e4       	ldi	r21, 0x47	; 71
     a70:	6f 85       	ldd	r22, Y+15	; 0x0f
     a72:	78 89       	ldd	r23, Y+16	; 0x10
     a74:	89 89       	ldd	r24, Y+17	; 0x11
     a76:	9a 89       	ldd	r25, Y+18	; 0x12
     a78:	0e 94 fb 07 	call	0xff6	; 0xff6 <__gesf2>
     a7c:	18 16       	cp	r1, r24
     a7e:	4c f5       	brge	.+82     	; 0xad2 <lm35+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e2       	ldi	r20, 0x20	; 32
     a86:	51 e4       	ldi	r21, 0x41	; 65
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	9c 8b       	std	Y+20, r25	; 0x14
     aa6:	8b 8b       	std	Y+19, r24	; 0x13
     aa8:	0f c0       	rjmp	.+30     	; 0xac8 <lm35+0x146>
     aaa:	80 e9       	ldi	r24, 0x90	; 144
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	9e 8b       	std	Y+22, r25	; 0x16
     ab0:	8d 8b       	std	Y+21, r24	; 0x15
     ab2:	8d 89       	ldd	r24, Y+21	; 0x15
     ab4:	9e 89       	ldd	r25, Y+22	; 0x16
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <lm35+0x134>
     aba:	9e 8b       	std	Y+22, r25	; 0x16
     abc:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     abe:	8b 89       	ldd	r24, Y+19	; 0x13
     ac0:	9c 89       	ldd	r25, Y+20	; 0x14
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	9c 8b       	std	Y+20, r25	; 0x14
     ac6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac8:	8b 89       	ldd	r24, Y+19	; 0x13
     aca:	9c 89       	ldd	r25, Y+20	; 0x14
     acc:	89 2b       	or	r24, r25
     ace:	69 f7       	brne	.-38     	; 0xaaa <lm35+0x128>
     ad0:	14 c0       	rjmp	.+40     	; 0xafa <lm35+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad2:	6f 85       	ldd	r22, Y+15	; 0x0f
     ad4:	78 89       	ldd	r23, Y+16	; 0x10
     ad6:	89 89       	ldd	r24, Y+17	; 0x11
     ad8:	9a 89       	ldd	r25, Y+18	; 0x12
     ada:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     ade:	dc 01       	movw	r26, r24
     ae0:	cb 01       	movw	r24, r22
     ae2:	9c 8b       	std	Y+20, r25	; 0x14
     ae4:	8b 8b       	std	Y+19, r24	; 0x13
     ae6:	8b 89       	ldd	r24, Y+19	; 0x13
     ae8:	9c 89       	ldd	r25, Y+20	; 0x14
     aea:	98 8f       	std	Y+24, r25	; 0x18
     aec:	8f 8b       	std	Y+23, r24	; 0x17
     aee:	8f 89       	ldd	r24, Y+23	; 0x17
     af0:	98 8d       	ldd	r25, Y+24	; 0x18
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <lm35+0x170>
     af6:	98 8f       	std	Y+24, r25	; 0x18
     af8:	8f 8b       	std	Y+23, r24	; 0x17

      // timed loop
      _delay_ms(750);	// wait 1 second

      // LED blink
      PORTB |= (1<<PB5);
     afa:	85 e2       	ldi	r24, 0x25	; 37
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	25 e2       	ldi	r18, 0x25	; 37
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	f9 01       	movw	r30, r18
     b04:	20 81       	ld	r18, Z
     b06:	20 62       	ori	r18, 0x20	; 32
     b08:	fc 01       	movw	r30, r24
     b0a:	20 83       	st	Z, r18
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	aa e7       	ldi	r26, 0x7A	; 122
     b12:	b3 e4       	ldi	r27, 0x43	; 67
     b14:	89 8f       	std	Y+25, r24	; 0x19
     b16:	9a 8f       	std	Y+26, r25	; 0x1a
     b18:	ab 8f       	std	Y+27, r26	; 0x1b
     b1a:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	4a e7       	ldi	r20, 0x7A	; 122
     b22:	55 e4       	ldi	r21, 0x45	; 69
     b24:	69 8d       	ldd	r22, Y+25	; 0x19
     b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b2c:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     b30:	dc 01       	movw	r26, r24
     b32:	cb 01       	movw	r24, r22
     b34:	8d 8f       	std	Y+29, r24	; 0x1d
     b36:	9e 8f       	std	Y+30, r25	; 0x1e
     b38:	af 8f       	std	Y+31, r26	; 0x1f
     b3a:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e8       	ldi	r20, 0x80	; 128
     b42:	5f e3       	ldi	r21, 0x3F	; 63
     b44:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b46:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b4a:	98 a1       	ldd	r25, Y+32	; 0x20
     b4c:	0e 94 9c 06 	call	0xd38	; 0xd38 <__cmpsf2>
     b50:	88 23       	and	r24, r24
     b52:	2c f4       	brge	.+10     	; 0xb5e <lm35+0x1dc>
		__ticks = 1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9a a3       	std	Y+34, r25	; 0x22
     b5a:	89 a3       	std	Y+33, r24	; 0x21
     b5c:	3f c0       	rjmp	.+126    	; 0xbdc <lm35+0x25a>
	else if (__tmp > 65535)
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	3f ef       	ldi	r19, 0xFF	; 255
     b62:	4f e7       	ldi	r20, 0x7F	; 127
     b64:	57 e4       	ldi	r21, 0x47	; 71
     b66:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b68:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b6c:	98 a1       	ldd	r25, Y+32	; 0x20
     b6e:	0e 94 fb 07 	call	0xff6	; 0xff6 <__gesf2>
     b72:	18 16       	cp	r1, r24
     b74:	4c f5       	brge	.+82     	; 0xbc8 <lm35+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e2       	ldi	r20, 0x20	; 32
     b7c:	51 e4       	ldi	r21, 0x41	; 65
     b7e:	69 8d       	ldd	r22, Y+25	; 0x19
     b80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b86:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	bc 01       	movw	r22, r24
     b90:	cd 01       	movw	r24, r26
     b92:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	9a a3       	std	Y+34, r25	; 0x22
     b9c:	89 a3       	std	Y+33, r24	; 0x21
     b9e:	0f c0       	rjmp	.+30     	; 0xbbe <lm35+0x23c>
     ba0:	80 e9       	ldi	r24, 0x90	; 144
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	9c a3       	std	Y+36, r25	; 0x24
     ba6:	8b a3       	std	Y+35, r24	; 0x23
     ba8:	8b a1       	ldd	r24, Y+35	; 0x23
     baa:	9c a1       	ldd	r25, Y+36	; 0x24
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <lm35+0x22a>
     bb0:	9c a3       	std	Y+36, r25	; 0x24
     bb2:	8b a3       	std	Y+35, r24	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb4:	89 a1       	ldd	r24, Y+33	; 0x21
     bb6:	9a a1       	ldd	r25, Y+34	; 0x22
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	9a a3       	std	Y+34, r25	; 0x22
     bbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bbe:	89 a1       	ldd	r24, Y+33	; 0x21
     bc0:	9a a1       	ldd	r25, Y+34	; 0x22
     bc2:	89 2b       	or	r24, r25
     bc4:	69 f7       	brne	.-38     	; 0xba0 <lm35+0x21e>
     bc6:	14 c0       	rjmp	.+40     	; 0xbf0 <lm35+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bc8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bca:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bce:	98 a1       	ldd	r25, Y+32	; 0x20
     bd0:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	9a a3       	std	Y+34, r25	; 0x22
     bda:	89 a3       	std	Y+33, r24	; 0x21
     bdc:	89 a1       	ldd	r24, Y+33	; 0x21
     bde:	9a a1       	ldd	r25, Y+34	; 0x22
     be0:	9e a3       	std	Y+38, r25	; 0x26
     be2:	8d a3       	std	Y+37, r24	; 0x25
     be4:	8d a1       	ldd	r24, Y+37	; 0x25
     be6:	9e a1       	ldd	r25, Y+38	; 0x26
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <lm35+0x266>
     bec:	9e a3       	std	Y+38, r25	; 0x26
     bee:	8d a3       	std	Y+37, r24	; 0x25
      _delay_ms(250);
      PORTB &= ~(1<<PB5);
     bf0:	85 e2       	ldi	r24, 0x25	; 37
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	25 e2       	ldi	r18, 0x25	; 37
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	f9 01       	movw	r30, r18
     bfa:	20 81       	ld	r18, Z
     bfc:	2f 7d       	andi	r18, 0xDF	; 223
     bfe:	fc 01       	movw	r30, r24
     c00:	20 83       	st	Z, r18

   }
     c02:	d0 ce       	rjmp	.-608    	; 0x9a4 <lm35+0x22>

00000c04 <main>:
#include "led_blinking_TC0.h"
//#include "led_blinking_TC0_ints.h"
//#include "fan.h"
#include "lm35.h"

int main(void) {
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	00 d0       	rcall	.+0      	; 0xc0a <main+0x6>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
	int c = 4;
     c0e:	84 e0       	ldi	r24, 0x04	; 4
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	89 83       	std	Y+1, r24	; 0x01
	switch(c) {
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	91 05       	cpc	r25, r1
     c1e:	79 f0       	breq	.+30     	; 0xc3e <main+0x3a>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	91 05       	cpc	r25, r1
     c24:	1c f4       	brge	.+6      	; 0xc2c <main+0x28>
     c26:	89 2b       	or	r24, r25
     c28:	39 f0       	breq	.+14     	; 0xc38 <main+0x34>
     c2a:	12 c0       	rjmp	.+36     	; 0xc50 <main+0x4c>
     c2c:	82 30       	cpi	r24, 0x02	; 2
     c2e:	91 05       	cpc	r25, r1
     c30:	49 f0       	breq	.+18     	; 0xc44 <main+0x40>
     c32:	04 97       	sbiw	r24, 0x04	; 4
     c34:	51 f0       	breq	.+20     	; 0xc4a <main+0x46>
     c36:	0c c0       	rjmp	.+24     	; 0xc50 <main+0x4c>
		case 0:
			return blinking_led();
     c38:	0e 94 48 00 	call	0x90	; 0x90 <blinking_led>
     c3c:	0b c0       	rjmp	.+22     	; 0xc54 <main+0x50>
		case 1:
			return led_blinking_TC0();
     c3e:	0e 94 37 04 	call	0x86e	; 0x86e <led_blinking_TC0>
     c42:	08 c0       	rjmp	.+16     	; 0xc54 <main+0x50>
		case 2:
			return lm35();
     c44:	0e 94 c1 04 	call	0x982	; 0x982 <lm35>
     c48:	05 c0       	rjmp	.+10     	; 0xc54 <main+0x50>
//		case 3:
//			return fan();
		case 4:
			return dist_sensor();
     c4a:	0e 94 c5 01 	call	0x38a	; 0x38a <dist_sensor>
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <main+0x50>
		default:
			return 0;
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
	}
		
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <__subsf3>:
     c5e:	50 58       	subi	r21, 0x80	; 128

00000c60 <__addsf3>:
     c60:	bb 27       	eor	r27, r27
     c62:	aa 27       	eor	r26, r26
     c64:	0e 94 47 06 	call	0xc8e	; 0xc8e <__addsf3x>
     c68:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_round>
     c6c:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscA>
     c70:	38 f0       	brcs	.+14     	; 0xc80 <__addsf3+0x20>
     c72:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fp_pscB>
     c76:	20 f0       	brcs	.+8      	; 0xc80 <__addsf3+0x20>
     c78:	39 f4       	brne	.+14     	; 0xc88 <__addsf3+0x28>
     c7a:	9f 3f       	cpi	r25, 0xFF	; 255
     c7c:	19 f4       	brne	.+6      	; 0xc84 <__addsf3+0x24>
     c7e:	26 f4       	brtc	.+8      	; 0xc88 <__addsf3+0x28>
     c80:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_nan>
     c84:	0e f4       	brtc	.+2      	; 0xc88 <__addsf3+0x28>
     c86:	e0 95       	com	r30
     c88:	e7 fb       	bst	r30, 7
     c8a:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>

00000c8e <__addsf3x>:
     c8e:	e9 2f       	mov	r30, r25
     c90:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_split3>
     c94:	58 f3       	brcs	.-42     	; 0xc6c <__addsf3+0xc>
     c96:	ba 17       	cp	r27, r26
     c98:	62 07       	cpc	r22, r18
     c9a:	73 07       	cpc	r23, r19
     c9c:	84 07       	cpc	r24, r20
     c9e:	95 07       	cpc	r25, r21
     ca0:	20 f0       	brcs	.+8      	; 0xcaa <__addsf3x+0x1c>
     ca2:	79 f4       	brne	.+30     	; 0xcc2 <__addsf3x+0x34>
     ca4:	a6 f5       	brtc	.+104    	; 0xd0e <__addsf3x+0x80>
     ca6:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_zero>
     caa:	0e f4       	brtc	.+2      	; 0xcae <__addsf3x+0x20>
     cac:	e0 95       	com	r30
     cae:	0b 2e       	mov	r0, r27
     cb0:	ba 2f       	mov	r27, r26
     cb2:	a0 2d       	mov	r26, r0
     cb4:	0b 01       	movw	r0, r22
     cb6:	b9 01       	movw	r22, r18
     cb8:	90 01       	movw	r18, r0
     cba:	0c 01       	movw	r0, r24
     cbc:	ca 01       	movw	r24, r20
     cbe:	a0 01       	movw	r20, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	ff 27       	eor	r31, r31
     cc4:	59 1b       	sub	r21, r25
     cc6:	99 f0       	breq	.+38     	; 0xcee <__addsf3x+0x60>
     cc8:	59 3f       	cpi	r21, 0xF9	; 249
     cca:	50 f4       	brcc	.+20     	; 0xce0 <__addsf3x+0x52>
     ccc:	50 3e       	cpi	r21, 0xE0	; 224
     cce:	68 f1       	brcs	.+90     	; 0xd2a <__addsf3x+0x9c>
     cd0:	1a 16       	cp	r1, r26
     cd2:	f0 40       	sbci	r31, 0x00	; 0
     cd4:	a2 2f       	mov	r26, r18
     cd6:	23 2f       	mov	r18, r19
     cd8:	34 2f       	mov	r19, r20
     cda:	44 27       	eor	r20, r20
     cdc:	58 5f       	subi	r21, 0xF8	; 248
     cde:	f3 cf       	rjmp	.-26     	; 0xcc6 <__addsf3x+0x38>
     ce0:	46 95       	lsr	r20
     ce2:	37 95       	ror	r19
     ce4:	27 95       	ror	r18
     ce6:	a7 95       	ror	r26
     ce8:	f0 40       	sbci	r31, 0x00	; 0
     cea:	53 95       	inc	r21
     cec:	c9 f7       	brne	.-14     	; 0xce0 <__addsf3x+0x52>
     cee:	7e f4       	brtc	.+30     	; 0xd0e <__addsf3x+0x80>
     cf0:	1f 16       	cp	r1, r31
     cf2:	ba 0b       	sbc	r27, r26
     cf4:	62 0b       	sbc	r22, r18
     cf6:	73 0b       	sbc	r23, r19
     cf8:	84 0b       	sbc	r24, r20
     cfa:	ba f0       	brmi	.+46     	; 0xd2a <__addsf3x+0x9c>
     cfc:	91 50       	subi	r25, 0x01	; 1
     cfe:	a1 f0       	breq	.+40     	; 0xd28 <__addsf3x+0x9a>
     d00:	ff 0f       	add	r31, r31
     d02:	bb 1f       	adc	r27, r27
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	88 1f       	adc	r24, r24
     d0a:	c2 f7       	brpl	.-16     	; 0xcfc <__addsf3x+0x6e>
     d0c:	0e c0       	rjmp	.+28     	; 0xd2a <__addsf3x+0x9c>
     d0e:	ba 0f       	add	r27, r26
     d10:	62 1f       	adc	r22, r18
     d12:	73 1f       	adc	r23, r19
     d14:	84 1f       	adc	r24, r20
     d16:	48 f4       	brcc	.+18     	; 0xd2a <__addsf3x+0x9c>
     d18:	87 95       	ror	r24
     d1a:	77 95       	ror	r23
     d1c:	67 95       	ror	r22
     d1e:	b7 95       	ror	r27
     d20:	f7 95       	ror	r31
     d22:	9e 3f       	cpi	r25, 0xFE	; 254
     d24:	08 f0       	brcs	.+2      	; 0xd28 <__addsf3x+0x9a>
     d26:	b0 cf       	rjmp	.-160    	; 0xc88 <__addsf3+0x28>
     d28:	93 95       	inc	r25
     d2a:	88 0f       	add	r24, r24
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <__addsf3x+0xa2>
     d2e:	99 27       	eor	r25, r25
     d30:	ee 0f       	add	r30, r30
     d32:	97 95       	ror	r25
     d34:	87 95       	ror	r24
     d36:	08 95       	ret

00000d38 <__cmpsf2>:
     d38:	0e 94 86 07 	call	0xf0c	; 0xf0c <__fp_cmp>
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <__cmpsf2+0x8>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	08 95       	ret

00000d42 <__divsf3>:
     d42:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__divsf3x>
     d46:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_round>
     d4a:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fp_pscB>
     d4e:	58 f0       	brcs	.+22     	; 0xd66 <__divsf3+0x24>
     d50:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscA>
     d54:	40 f0       	brcs	.+16     	; 0xd66 <__divsf3+0x24>
     d56:	29 f4       	brne	.+10     	; 0xd62 <__divsf3+0x20>
     d58:	5f 3f       	cpi	r21, 0xFF	; 255
     d5a:	29 f0       	breq	.+10     	; 0xd66 <__divsf3+0x24>
     d5c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>
     d60:	51 11       	cpse	r21, r1
     d62:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_szero>
     d66:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_nan>

00000d6a <__divsf3x>:
     d6a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_split3>
     d6e:	68 f3       	brcs	.-38     	; 0xd4a <__divsf3+0x8>

00000d70 <__divsf3_pse>:
     d70:	99 23       	and	r25, r25
     d72:	b1 f3       	breq	.-20     	; 0xd60 <__divsf3+0x1e>
     d74:	55 23       	and	r21, r21
     d76:	91 f3       	breq	.-28     	; 0xd5c <__divsf3+0x1a>
     d78:	95 1b       	sub	r25, r21
     d7a:	55 0b       	sbc	r21, r21
     d7c:	bb 27       	eor	r27, r27
     d7e:	aa 27       	eor	r26, r26
     d80:	62 17       	cp	r22, r18
     d82:	73 07       	cpc	r23, r19
     d84:	84 07       	cpc	r24, r20
     d86:	38 f0       	brcs	.+14     	; 0xd96 <__divsf3_pse+0x26>
     d88:	9f 5f       	subi	r25, 0xFF	; 255
     d8a:	5f 4f       	sbci	r21, 0xFF	; 255
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	aa 1f       	adc	r26, r26
     d94:	a9 f3       	breq	.-22     	; 0xd80 <__divsf3_pse+0x10>
     d96:	35 d0       	rcall	.+106    	; 0xe02 <__divsf3_pse+0x92>
     d98:	0e 2e       	mov	r0, r30
     d9a:	3a f0       	brmi	.+14     	; 0xdaa <__divsf3_pse+0x3a>
     d9c:	e0 e8       	ldi	r30, 0x80	; 128
     d9e:	32 d0       	rcall	.+100    	; 0xe04 <__divsf3_pse+0x94>
     da0:	91 50       	subi	r25, 0x01	; 1
     da2:	50 40       	sbci	r21, 0x00	; 0
     da4:	e6 95       	lsr	r30
     da6:	00 1c       	adc	r0, r0
     da8:	ca f7       	brpl	.-14     	; 0xd9c <__divsf3_pse+0x2c>
     daa:	2b d0       	rcall	.+86     	; 0xe02 <__divsf3_pse+0x92>
     dac:	fe 2f       	mov	r31, r30
     dae:	29 d0       	rcall	.+82     	; 0xe02 <__divsf3_pse+0x92>
     db0:	66 0f       	add	r22, r22
     db2:	77 1f       	adc	r23, r23
     db4:	88 1f       	adc	r24, r24
     db6:	bb 1f       	adc	r27, r27
     db8:	26 17       	cp	r18, r22
     dba:	37 07       	cpc	r19, r23
     dbc:	48 07       	cpc	r20, r24
     dbe:	ab 07       	cpc	r26, r27
     dc0:	b0 e8       	ldi	r27, 0x80	; 128
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <__divsf3_pse+0x56>
     dc4:	bb 0b       	sbc	r27, r27
     dc6:	80 2d       	mov	r24, r0
     dc8:	bf 01       	movw	r22, r30
     dca:	ff 27       	eor	r31, r31
     dcc:	93 58       	subi	r25, 0x83	; 131
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	3a f0       	brmi	.+14     	; 0xde0 <__divsf3_pse+0x70>
     dd2:	9e 3f       	cpi	r25, 0xFE	; 254
     dd4:	51 05       	cpc	r21, r1
     dd6:	78 f0       	brcs	.+30     	; 0xdf6 <__divsf3_pse+0x86>
     dd8:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>
     ddc:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_szero>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	e4 f3       	brlt	.-8      	; 0xddc <__divsf3_pse+0x6c>
     de4:	98 3e       	cpi	r25, 0xE8	; 232
     de6:	d4 f3       	brlt	.-12     	; 0xddc <__divsf3_pse+0x6c>
     de8:	86 95       	lsr	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f7 95       	ror	r31
     df2:	9f 5f       	subi	r25, 0xFF	; 255
     df4:	c9 f7       	brne	.-14     	; 0xde8 <__divsf3_pse+0x78>
     df6:	88 0f       	add	r24, r24
     df8:	91 1d       	adc	r25, r1
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	97 f9       	bld	r25, 7
     e00:	08 95       	ret
     e02:	e1 e0       	ldi	r30, 0x01	; 1
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	bb 1f       	adc	r27, r27
     e0c:	62 17       	cp	r22, r18
     e0e:	73 07       	cpc	r23, r19
     e10:	84 07       	cpc	r24, r20
     e12:	ba 07       	cpc	r27, r26
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__divsf3_pse+0xae>
     e16:	62 1b       	sub	r22, r18
     e18:	73 0b       	sbc	r23, r19
     e1a:	84 0b       	sbc	r24, r20
     e1c:	ba 0b       	sbc	r27, r26
     e1e:	ee 1f       	adc	r30, r30
     e20:	88 f7       	brcc	.-30     	; 0xe04 <__divsf3_pse+0x94>
     e22:	e0 95       	com	r30
     e24:	08 95       	ret

00000e26 <__fixsfsi>:
     e26:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fixunssfsi>
     e2a:	68 94       	set
     e2c:	b1 11       	cpse	r27, r1
     e2e:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_szero>
     e32:	08 95       	ret

00000e34 <__fixunssfsi>:
     e34:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_splitA>
     e38:	88 f0       	brcs	.+34     	; 0xe5c <__fixunssfsi+0x28>
     e3a:	9f 57       	subi	r25, 0x7F	; 127
     e3c:	98 f0       	brcs	.+38     	; 0xe64 <__fixunssfsi+0x30>
     e3e:	b9 2f       	mov	r27, r25
     e40:	99 27       	eor	r25, r25
     e42:	b7 51       	subi	r27, 0x17	; 23
     e44:	b0 f0       	brcs	.+44     	; 0xe72 <__fixunssfsi+0x3e>
     e46:	e1 f0       	breq	.+56     	; 0xe80 <__fixunssfsi+0x4c>
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	88 1f       	adc	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	1a f0       	brmi	.+6      	; 0xe58 <__fixunssfsi+0x24>
     e52:	ba 95       	dec	r27
     e54:	c9 f7       	brne	.-14     	; 0xe48 <__fixunssfsi+0x14>
     e56:	14 c0       	rjmp	.+40     	; 0xe80 <__fixunssfsi+0x4c>
     e58:	b1 30       	cpi	r27, 0x01	; 1
     e5a:	91 f0       	breq	.+36     	; 0xe80 <__fixunssfsi+0x4c>
     e5c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__fp_zero>
     e60:	b1 e0       	ldi	r27, 0x01	; 1
     e62:	08 95       	ret
     e64:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_zero>
     e68:	67 2f       	mov	r22, r23
     e6a:	78 2f       	mov	r23, r24
     e6c:	88 27       	eor	r24, r24
     e6e:	b8 5f       	subi	r27, 0xF8	; 248
     e70:	39 f0       	breq	.+14     	; 0xe80 <__fixunssfsi+0x4c>
     e72:	b9 3f       	cpi	r27, 0xF9	; 249
     e74:	cc f3       	brlt	.-14     	; 0xe68 <__fixunssfsi+0x34>
     e76:	86 95       	lsr	r24
     e78:	77 95       	ror	r23
     e7a:	67 95       	ror	r22
     e7c:	b3 95       	inc	r27
     e7e:	d9 f7       	brne	.-10     	; 0xe76 <__fixunssfsi+0x42>
     e80:	3e f4       	brtc	.+14     	; 0xe90 <__fixunssfsi+0x5c>
     e82:	90 95       	com	r25
     e84:	80 95       	com	r24
     e86:	70 95       	com	r23
     e88:	61 95       	neg	r22
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	08 95       	ret

00000e92 <__floatunsisf>:
     e92:	e8 94       	clt
     e94:	09 c0       	rjmp	.+18     	; 0xea8 <__floatsisf+0x12>

00000e96 <__floatsisf>:
     e96:	97 fb       	bst	r25, 7
     e98:	3e f4       	brtc	.+14     	; 0xea8 <__floatsisf+0x12>
     e9a:	90 95       	com	r25
     e9c:	80 95       	com	r24
     e9e:	70 95       	com	r23
     ea0:	61 95       	neg	r22
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	8f 4f       	sbci	r24, 0xFF	; 255
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	99 23       	and	r25, r25
     eaa:	a9 f0       	breq	.+42     	; 0xed6 <__floatsisf+0x40>
     eac:	f9 2f       	mov	r31, r25
     eae:	96 e9       	ldi	r25, 0x96	; 150
     eb0:	bb 27       	eor	r27, r27
     eb2:	93 95       	inc	r25
     eb4:	f6 95       	lsr	r31
     eb6:	87 95       	ror	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b7 95       	ror	r27
     ebe:	f1 11       	cpse	r31, r1
     ec0:	f8 cf       	rjmp	.-16     	; 0xeb2 <__floatsisf+0x1c>
     ec2:	fa f4       	brpl	.+62     	; 0xf02 <__floatsisf+0x6c>
     ec4:	bb 0f       	add	r27, r27
     ec6:	11 f4       	brne	.+4      	; 0xecc <__floatsisf+0x36>
     ec8:	60 ff       	sbrs	r22, 0
     eca:	1b c0       	rjmp	.+54     	; 0xf02 <__floatsisf+0x6c>
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	8f 4f       	sbci	r24, 0xFF	; 255
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	16 c0       	rjmp	.+44     	; 0xf02 <__floatsisf+0x6c>
     ed6:	88 23       	and	r24, r24
     ed8:	11 f0       	breq	.+4      	; 0xede <__floatsisf+0x48>
     eda:	96 e9       	ldi	r25, 0x96	; 150
     edc:	11 c0       	rjmp	.+34     	; 0xf00 <__floatsisf+0x6a>
     ede:	77 23       	and	r23, r23
     ee0:	21 f0       	breq	.+8      	; 0xeea <__floatsisf+0x54>
     ee2:	9e e8       	ldi	r25, 0x8E	; 142
     ee4:	87 2f       	mov	r24, r23
     ee6:	76 2f       	mov	r23, r22
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <__floatsisf+0x5e>
     eea:	66 23       	and	r22, r22
     eec:	71 f0       	breq	.+28     	; 0xf0a <__floatsisf+0x74>
     eee:	96 e8       	ldi	r25, 0x86	; 134
     ef0:	86 2f       	mov	r24, r22
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	2a f0       	brmi	.+10     	; 0xf02 <__floatsisf+0x6c>
     ef8:	9a 95       	dec	r25
     efa:	66 0f       	add	r22, r22
     efc:	77 1f       	adc	r23, r23
     efe:	88 1f       	adc	r24, r24
     f00:	da f7       	brpl	.-10     	; 0xef8 <__floatsisf+0x62>
     f02:	88 0f       	add	r24, r24
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	97 f9       	bld	r25, 7
     f0a:	08 95       	ret

00000f0c <__fp_cmp>:
     f0c:	99 0f       	add	r25, r25
     f0e:	00 08       	sbc	r0, r0
     f10:	55 0f       	add	r21, r21
     f12:	aa 0b       	sbc	r26, r26
     f14:	e0 e8       	ldi	r30, 0x80	; 128
     f16:	fe ef       	ldi	r31, 0xFE	; 254
     f18:	16 16       	cp	r1, r22
     f1a:	17 06       	cpc	r1, r23
     f1c:	e8 07       	cpc	r30, r24
     f1e:	f9 07       	cpc	r31, r25
     f20:	c0 f0       	brcs	.+48     	; 0xf52 <__fp_cmp+0x46>
     f22:	12 16       	cp	r1, r18
     f24:	13 06       	cpc	r1, r19
     f26:	e4 07       	cpc	r30, r20
     f28:	f5 07       	cpc	r31, r21
     f2a:	98 f0       	brcs	.+38     	; 0xf52 <__fp_cmp+0x46>
     f2c:	62 1b       	sub	r22, r18
     f2e:	73 0b       	sbc	r23, r19
     f30:	84 0b       	sbc	r24, r20
     f32:	95 0b       	sbc	r25, r21
     f34:	39 f4       	brne	.+14     	; 0xf44 <__fp_cmp+0x38>
     f36:	0a 26       	eor	r0, r26
     f38:	61 f0       	breq	.+24     	; 0xf52 <__fp_cmp+0x46>
     f3a:	23 2b       	or	r18, r19
     f3c:	24 2b       	or	r18, r20
     f3e:	25 2b       	or	r18, r21
     f40:	21 f4       	brne	.+8      	; 0xf4a <__fp_cmp+0x3e>
     f42:	08 95       	ret
     f44:	0a 26       	eor	r0, r26
     f46:	09 f4       	brne	.+2      	; 0xf4a <__fp_cmp+0x3e>
     f48:	a1 40       	sbci	r26, 0x01	; 1
     f4a:	a6 95       	lsr	r26
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	81 1d       	adc	r24, r1
     f50:	81 1d       	adc	r24, r1
     f52:	08 95       	ret

00000f54 <__fp_inf>:
     f54:	97 f9       	bld	r25, 7
     f56:	9f 67       	ori	r25, 0x7F	; 127
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	08 95       	ret

00000f60 <__fp_nan>:
     f60:	9f ef       	ldi	r25, 0xFF	; 255
     f62:	80 ec       	ldi	r24, 0xC0	; 192
     f64:	08 95       	ret

00000f66 <__fp_pscA>:
     f66:	00 24       	eor	r0, r0
     f68:	0a 94       	dec	r0
     f6a:	16 16       	cp	r1, r22
     f6c:	17 06       	cpc	r1, r23
     f6e:	18 06       	cpc	r1, r24
     f70:	09 06       	cpc	r0, r25
     f72:	08 95       	ret

00000f74 <__fp_pscB>:
     f74:	00 24       	eor	r0, r0
     f76:	0a 94       	dec	r0
     f78:	12 16       	cp	r1, r18
     f7a:	13 06       	cpc	r1, r19
     f7c:	14 06       	cpc	r1, r20
     f7e:	05 06       	cpc	r0, r21
     f80:	08 95       	ret

00000f82 <__fp_round>:
     f82:	09 2e       	mov	r0, r25
     f84:	03 94       	inc	r0
     f86:	00 0c       	add	r0, r0
     f88:	11 f4       	brne	.+4      	; 0xf8e <__fp_round+0xc>
     f8a:	88 23       	and	r24, r24
     f8c:	52 f0       	brmi	.+20     	; 0xfa2 <__fp_round+0x20>
     f8e:	bb 0f       	add	r27, r27
     f90:	40 f4       	brcc	.+16     	; 0xfa2 <__fp_round+0x20>
     f92:	bf 2b       	or	r27, r31
     f94:	11 f4       	brne	.+4      	; 0xf9a <__fp_round+0x18>
     f96:	60 ff       	sbrs	r22, 0
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__fp_round+0x20>
     f9a:	6f 5f       	subi	r22, 0xFF	; 255
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__fp_split3>:
     fa4:	57 fd       	sbrc	r21, 7
     fa6:	90 58       	subi	r25, 0x80	; 128
     fa8:	44 0f       	add	r20, r20
     faa:	55 1f       	adc	r21, r21
     fac:	59 f0       	breq	.+22     	; 0xfc4 <__fp_splitA+0x10>
     fae:	5f 3f       	cpi	r21, 0xFF	; 255
     fb0:	71 f0       	breq	.+28     	; 0xfce <__fp_splitA+0x1a>
     fb2:	47 95       	ror	r20

00000fb4 <__fp_splitA>:
     fb4:	88 0f       	add	r24, r24
     fb6:	97 fb       	bst	r25, 7
     fb8:	99 1f       	adc	r25, r25
     fba:	61 f0       	breq	.+24     	; 0xfd4 <__fp_splitA+0x20>
     fbc:	9f 3f       	cpi	r25, 0xFF	; 255
     fbe:	79 f0       	breq	.+30     	; 0xfde <__fp_splitA+0x2a>
     fc0:	87 95       	ror	r24
     fc2:	08 95       	ret
     fc4:	12 16       	cp	r1, r18
     fc6:	13 06       	cpc	r1, r19
     fc8:	14 06       	cpc	r1, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	f2 cf       	rjmp	.-28     	; 0xfb2 <__fp_split3+0xe>
     fce:	46 95       	lsr	r20
     fd0:	f1 df       	rcall	.-30     	; 0xfb4 <__fp_splitA>
     fd2:	08 c0       	rjmp	.+16     	; 0xfe4 <__fp_splitA+0x30>
     fd4:	16 16       	cp	r1, r22
     fd6:	17 06       	cpc	r1, r23
     fd8:	18 06       	cpc	r1, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	f1 cf       	rjmp	.-30     	; 0xfc0 <__fp_splitA+0xc>
     fde:	86 95       	lsr	r24
     fe0:	71 05       	cpc	r23, r1
     fe2:	61 05       	cpc	r22, r1
     fe4:	08 94       	sec
     fe6:	08 95       	ret

00000fe8 <__fp_zero>:
     fe8:	e8 94       	clt

00000fea <__fp_szero>:
     fea:	bb 27       	eor	r27, r27
     fec:	66 27       	eor	r22, r22
     fee:	77 27       	eor	r23, r23
     ff0:	cb 01       	movw	r24, r22
     ff2:	97 f9       	bld	r25, 7
     ff4:	08 95       	ret

00000ff6 <__gesf2>:
     ff6:	0e 94 86 07 	call	0xf0c	; 0xf0c <__fp_cmp>
     ffa:	08 f4       	brcc	.+2      	; 0xffe <__gesf2+0x8>
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	08 95       	ret

00001000 <__mulsf3>:
    1000:	0e 94 13 08 	call	0x1026	; 0x1026 <__mulsf3x>
    1004:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_round>
    1008:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscA>
    100c:	38 f0       	brcs	.+14     	; 0x101c <__mulsf3+0x1c>
    100e:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fp_pscB>
    1012:	20 f0       	brcs	.+8      	; 0x101c <__mulsf3+0x1c>
    1014:	95 23       	and	r25, r21
    1016:	11 f0       	breq	.+4      	; 0x101c <__mulsf3+0x1c>
    1018:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>
    101c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_nan>
    1020:	11 24       	eor	r1, r1
    1022:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_szero>

00001026 <__mulsf3x>:
    1026:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_split3>
    102a:	70 f3       	brcs	.-36     	; 0x1008 <__mulsf3+0x8>

0000102c <__mulsf3_pse>:
    102c:	95 9f       	mul	r25, r21
    102e:	c1 f3       	breq	.-16     	; 0x1020 <__mulsf3+0x20>
    1030:	95 0f       	add	r25, r21
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	55 1f       	adc	r21, r21
    1036:	62 9f       	mul	r22, r18
    1038:	f0 01       	movw	r30, r0
    103a:	72 9f       	mul	r23, r18
    103c:	bb 27       	eor	r27, r27
    103e:	f0 0d       	add	r31, r0
    1040:	b1 1d       	adc	r27, r1
    1042:	63 9f       	mul	r22, r19
    1044:	aa 27       	eor	r26, r26
    1046:	f0 0d       	add	r31, r0
    1048:	b1 1d       	adc	r27, r1
    104a:	aa 1f       	adc	r26, r26
    104c:	64 9f       	mul	r22, r20
    104e:	66 27       	eor	r22, r22
    1050:	b0 0d       	add	r27, r0
    1052:	a1 1d       	adc	r26, r1
    1054:	66 1f       	adc	r22, r22
    1056:	82 9f       	mul	r24, r18
    1058:	22 27       	eor	r18, r18
    105a:	b0 0d       	add	r27, r0
    105c:	a1 1d       	adc	r26, r1
    105e:	62 1f       	adc	r22, r18
    1060:	73 9f       	mul	r23, r19
    1062:	b0 0d       	add	r27, r0
    1064:	a1 1d       	adc	r26, r1
    1066:	62 1f       	adc	r22, r18
    1068:	83 9f       	mul	r24, r19
    106a:	a0 0d       	add	r26, r0
    106c:	61 1d       	adc	r22, r1
    106e:	22 1f       	adc	r18, r18
    1070:	74 9f       	mul	r23, r20
    1072:	33 27       	eor	r19, r19
    1074:	a0 0d       	add	r26, r0
    1076:	61 1d       	adc	r22, r1
    1078:	23 1f       	adc	r18, r19
    107a:	84 9f       	mul	r24, r20
    107c:	60 0d       	add	r22, r0
    107e:	21 1d       	adc	r18, r1
    1080:	82 2f       	mov	r24, r18
    1082:	76 2f       	mov	r23, r22
    1084:	6a 2f       	mov	r22, r26
    1086:	11 24       	eor	r1, r1
    1088:	9f 57       	subi	r25, 0x7F	; 127
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	9a f0       	brmi	.+38     	; 0x10b4 <__mulsf3_pse+0x88>
    108e:	f1 f0       	breq	.+60     	; 0x10cc <__mulsf3_pse+0xa0>
    1090:	88 23       	and	r24, r24
    1092:	4a f0       	brmi	.+18     	; 0x10a6 <__mulsf3_pse+0x7a>
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	bb 1f       	adc	r27, r27
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	91 50       	subi	r25, 0x01	; 1
    10a2:	50 40       	sbci	r21, 0x00	; 0
    10a4:	a9 f7       	brne	.-22     	; 0x1090 <__mulsf3_pse+0x64>
    10a6:	9e 3f       	cpi	r25, 0xFE	; 254
    10a8:	51 05       	cpc	r21, r1
    10aa:	80 f0       	brcs	.+32     	; 0x10cc <__mulsf3_pse+0xa0>
    10ac:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__fp_inf>
    10b0:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_szero>
    10b4:	5f 3f       	cpi	r21, 0xFF	; 255
    10b6:	e4 f3       	brlt	.-8      	; 0x10b0 <__mulsf3_pse+0x84>
    10b8:	98 3e       	cpi	r25, 0xE8	; 232
    10ba:	d4 f3       	brlt	.-12     	; 0x10b0 <__mulsf3_pse+0x84>
    10bc:	86 95       	lsr	r24
    10be:	77 95       	ror	r23
    10c0:	67 95       	ror	r22
    10c2:	b7 95       	ror	r27
    10c4:	f7 95       	ror	r31
    10c6:	e7 95       	ror	r30
    10c8:	9f 5f       	subi	r25, 0xFF	; 255
    10ca:	c1 f7       	brne	.-16     	; 0x10bc <__mulsf3_pse+0x90>
    10cc:	fe 2b       	or	r31, r30
    10ce:	88 0f       	add	r24, r24
    10d0:	91 1d       	adc	r25, r1
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	97 f9       	bld	r25, 7
    10d8:	08 95       	ret

000010da <_exit>:
    10da:	f8 94       	cli

000010dc <__stop_program>:
    10dc:	ff cf       	rjmp	.-2      	; 0x10dc <__stop_program>
